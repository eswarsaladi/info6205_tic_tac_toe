/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edu.neu.info6205.menace_tictactoe.gui;

import edu.neu.info6205.menace_tictactoe.Menace1;
import edu.neu.info6205.menace_tictactoe.business_logic.GameStats;
import edu.neu.info6205.menace_tictactoe.business_logic.MenaceData;
import edu.neu.info6205.menace_tictactoe.business_logic.Player;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author eswar
 */
public class GameBoard extends javax.swing.JFrame  {

    private Board board;
    private static GameBoard gameBoard;

    /**
     * Creates new form GameBoard
     */
    public GameBoard() {

        
        
        initialise();
        initialiseScores();
        
    }

    private void addBoard() {
        boardPane.add(board);
    }

    public void initialise() {
        board = Board.getObj();
        board.reset();
        initComponents();
        addBoard();
        
        
        this.setVisible(true);
//        gameStats.addObserver(this);
    }

    private void initialiseScores() {
        winCount.setText(String.valueOf(Menace1.gamesWon));
        drawCount.setText(String.valueOf(Menace1.gamesDraw));
        lossCount.setText(String.valueOf(Menace1.gamesLost));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        heading = new javax.swing.JLabel();
        winCount = new javax.swing.JLabel();
        winLabel = new javax.swing.JLabel();
        drawCount = new javax.swing.JLabel();
        drawLabel = new javax.swing.JLabel();
        lossCount = new javax.swing.JLabel();
        lossLabel = new javax.swing.JLabel();
        boardPane = new javax.swing.JPanel();
        menuButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        heading.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        heading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        heading.setText("Tic Tac Toe");

        winCount.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N

        winLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        winLabel.setText("Wins");

        drawCount.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N

        drawLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        drawLabel.setText("Draws");

        lossCount.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N

        lossLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        lossLabel.setText("Loses");

        boardPane.setLayout(new java.awt.GridLayout(1, 0));

        menuButton.setText("Menu");
        menuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(141, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(drawLabel)
                        .addGap(183, 183, 183)
                        .addComponent(lossLabel)
                        .addGap(55, 55, 55))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(boardPane, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(139, 139, 139))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(winLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(heading, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(menuButton))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(winCount)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(drawCount)
                .addGap(209, 209, 209)
                .addComponent(lossCount)
                .addGap(70, 70, 70))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(menuButton)
                .addGap(18, 18, 18)
                .addComponent(heading)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(boardPane, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(116, 116, 116)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lossCount)
                    .addComponent(drawCount)
                    .addComponent(winCount))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lossLabel)
                    .addComponent(drawLabel)
                    .addComponent(winLabel))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuButtonActionPerformed
        new Menu();
//        Menu.game.stop();
        this.dispose();
        
    }//GEN-LAST:event_menuButtonActionPerformed

    private GameStats gameStats;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel boardPane;
    private javax.swing.JLabel drawCount;
    private javax.swing.JLabel drawLabel;
    private javax.swing.JLabel heading;
    private javax.swing.JLabel lossCount;
    private javax.swing.JLabel lossLabel;
    private javax.swing.JButton menuButton;
    private javax.swing.JLabel winCount;
    private javax.swing.JLabel winLabel;
    // End of variables declaration//GEN-END:variables

//    @Override
//    public void update(Observable o, Object arg) {
//        
//            String data = arg.toString();
//            if (null != data) {
//                switch (data) {
//                    case "win" -> {
//                        
//                        winCount.setText(String.valueOf(gameStats.getWins()));
//                        int gameState = 4;
//                        int player = 1;
//                        MenaceData.getObj().addFromCurrentToStore(player, gameState);
//                        board.reset();
//                        
//                    }
//                    case "loss" -> {
//                        
//                        lossCount.setText(String.valueOf(gameStats.getLooses()));
//                        board.reset();
//                        
//                    }
//                    case "draw" -> {
//                        
//                        drawCount.setText(String.valueOf(gameStats.getDraws()));
//                        int gameState = 1;
//                        int player;
//                        if(gameStats.getPlayer2()==Player.MENACE)
//                        {player = 2;
//                        MenaceData.getObj().addFromCurrentToStore(player, gameState);}
//                        player = 1;
//                        MenaceData.getObj().addFromCurrentToStore(player, gameState);
//                        board.reset();
//                        
//                    }
//                    case "board" ->{
//                        board.paintBoard();
//                    }
//                    
//                    
//                }
//            }
//        
//    }
    
    public static GameBoard getObj(){
        if(gameBoard == null){
            gameBoard = new GameBoard();
            
        }
        return gameBoard;
    }
    public static GameBoard newObj(){
        gameBoard = new GameBoard();
        return gameBoard;
    }
    public void updateWinCount(int count){
        winCount.setText(String.valueOf(count));
    }
    
    public void updateLossCount(int count){
        lossCount.setText(String.valueOf(count));
    }
    
    public void updateDrawCount(int count){
        drawCount.setText(String.valueOf(count));
    }
}
